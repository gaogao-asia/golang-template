// Code generated by mockery v3.0.0-alpha.0. DO NOT EDIT.

package mocks

import (
	entity "github.com/gaogao-asia/golang-template/internal/entity"
	mock "github.com/stretchr/testify/mock"
)

// AccountService is an autogenerated mock type for the AccountService type
type AccountService struct {
	mock.Mock
}

// CreateAccount provides a mock function with given fields: account
func (_m *AccountService) CreateAccount(account *entity.Account) error {
	ret := _m.Called(account)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Account) error); ok {
		r0 = rf(account)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAccounts provides a mock function with given fields:
func (_m *AccountService) GetAccounts() ([]entity.Account, error) {
	ret := _m.Called()

	var r0 []entity.Account
	if rf, ok := ret.Get(0).(func() []entity.Account); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Account)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewAccountService interface {
	mock.TestingT
	Cleanup(func())
}

// NewAccountService creates a new instance of AccountService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAccountService(t mockConstructorTestingTNewAccountService) *AccountService {
	mock := &AccountService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
